<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN""http://www.w3.org/TR/html4/loose.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="content-type" content="text/html; charset=utf-8" />
<title>PaperPass 最权威中文论文抄袭检测系统</title>
<style type="text/css">
<!--
user_icon {
color: #FFFFFF;
}
html
{
overflow-x:hidden;
overflow-y:auto;
}
body,td,th {
font-family: "微软雅黑";
font-size: 12px;
}
h1,h2,h3,h4,h5,h6 {
font-family: "宋体";
}
p{
margin-bottom:10px;
}
demo_padding {
line-height: 30px;
}
.zhengwen {
padding-right: 15px;
padding-left: 5px;
padding-bottom:100px;
font-size: 13px;
line-height: 20px;
color: #666666;
}
.zhengwencenter {
padding-right: 15px;
padding-left: 0px;
margin-bottom:10px;
font-size: 13px;
line-height: 20px;
color: #666666;
text-align:center
}
.neikuang {
background-color: #EBEBEB;
border: 1px solid #999999;
padding-right: 10px;
padding-left: 10px;
margin-top:10px;
margin-left:25px;
width:300px;
}
.shubu{
height: 20px;
width: 20px;
margin-left:25px;
background-color: #FFFFFF;
border: 1px solid #999999;
text-align: center;
vertical-align: middle;
display: block;
color: #666666;
}
a.red:link {color:#FF0000}
a.red:visited {color:#FF0000}
a.red:hover {color:#000000}
a.red:active {color:#000000}

a.orange:link {color:#FF6600}
a.orange:visited {color:#FF6600}
a.orange:hover {color:#000000}
a.orange:active {color:#000000}

a.dark:link {color:#666666}
a.dark:visited {color:#666666}
a.dark:hover {color:#000000}
a.dark:active {color:#000000}

a.pagelink:hover {color:#000000}
a.pagelink:active {color:#000000}

.green{color:#008000}
.gray{color:#666666}
.red{color:#FF0000}
.orange{color:#FF6600}
a{TEXT-DECORATION:none}

-->
</style>
</head>
<body>


<div class="zhengwen">
<div>
<span style="margin-left:25px"></span>
[
<a class="pagelink" href="paper_1.htm">首页</a>
<a class="pagelink" href="paper_3.htm">上一页</a>
<a class="pagelink" href="paper_5.htm">下一页</a>
<a class="pagelink" href="paper_6.htm">尾页</a>
页码：4/6页
]
</div>

<div>
<p>
<table border="0" width="100%" cellspacing="0" cellpadding="0">
<tr>
<td align="left" width="50"><div class="shubu">93</div></td>
<td>&nbsp;&nbsp;</td>
</tr>
</table>

<span style="margin-left:25px"></span><span class='green'>应用ANBER工具到我们的系统。</span><span class='green'>首先我们进入ANBER网站http:</span><span class='green'>//pages.cs.wisc.edu/~bsettles/abner/，下载abner.jar可执行的jar包，这也是可以依赖的三方库，图4-6展示了这个jar包里面重要的类的说明。</span><span class='green'>如果直接运行的话，可以得到如图4-5的画面，输入一段待识别的文本，按下annotation按钮，它就可以识别出了文本中的生物医学实体，并且用不同的颜色进行标注和高亮显示出来。</span>
</p>
</div>

<div>
<p>
<table border="0" width="100%" cellspacing="0" cellpadding="0">
<tr>
<td align="left" width="50"><div class="shubu">94</div></td>
<td>&nbsp;&nbsp;</td>
</tr>
</table>

<span style="margin-left:25px"></span><span class='green'>表4-6</span>
</p>
</div>

<div>
<p>
<table border="0" width="100%" cellspacing="0" cellpadding="0">
<tr>
<td align="left" width="50"><div class="shubu">95</div></td>
<td>&nbsp;&nbsp;</td>
</tr>
</table>

<span style="margin-left:25px"></span><span class='green'>Input2TokenSequenceInput2TokenSequence is a text processing Pipe for the MALLET framework.</span>
</p>
</div>

<div>
<p>
<table border="0" width="100%" cellspacing="0" cellpadding="0">
<tr>
<td align="left" width="50"><div class="shubu">96</div></td>
<td>&nbsp;&nbsp;</td>
</tr>
</table>

<span style="margin-left:25px"></span><span class='green'>ScannerABNER's Scanner class implements the finite state machine used in tokenization.</span>
</p>
</div>

<div>
<p>
<table border="0" width="100%" cellspacing="0" cellpadding="0">
<tr>
<td align="left" width="50"><div class="shubu">97</div></td>
<td>&nbsp;&nbsp;</td>
</tr>
</table>

<span style="margin-left:25px"></span><span class='green'>TaggerThis is the interface to the CRF that does named entity tagging.</span>
</p>
</div>

<div>
<p>
<table border="0" width="100%" cellspacing="0" cellpadding="0">
<tr>
<td align="left" width="50"><div class="shubu">98</div></td>
<td>&nbsp;&nbsp;</td>
</tr>
</table>

<span style="margin-left:25px"></span><span class='green'>TrainerThe Trainer class will train a CRF to extract entities from a customized dataset.</span>
</p>
</div>

<div>
<p>
<table border="0" width="100%" cellspacing="0" cellpadding="0">
<tr>
<td align="left" width="50"><div class="shubu">99</div></td>
<td>&nbsp;&nbsp;</td>
</tr>
</table>

<span style="margin-left:25px"></span><span class='green'>现在我把它通过三方库的方式引用到我的工程里面。</span><span class='green'>首先实例化一个Tagger的对象Tagger t = new Tagger();</span><span class='green'>再条用Tagger里面的方法getEntities(fileContent， "PROTEIN");</span><span class='green'>函数里面的第一个参数表示文献文本字符串，第二个是具体的哪一个标签，我们要识别文本里面的蛋白质实体就可以用"PROTEIN"作为函数的第二个参数。</span><span class='green'>这样我们就可以获取文献里面所有的蛋白质的实体，图4-7是部分关键的代码：</span>
</p>
</div>

<div>
<p>
<table border="0" width="100%" cellspacing="0" cellpadding="0">
<tr>
<td align="left" width="50"><div class="shubu">100</div></td>
<td>&nbsp;&nbsp;</td>
</tr>
</table>

<span style="margin-left:25px"></span><span class='green'>//实例化tagger对象</span>
</p>
</div>

<div>
<p>
<table border="0" width="100%" cellspacing="0" cellpadding="0">
<tr>
<td align="left" width="50"><div class="shubu">101</div></td>
<td>&nbsp;&nbsp;</td>
</tr>
</table>

<span style="margin-left:25px"></span><span class='green'>Tagger t = new Tagger();</span>
</p>
</div>

<div>
<p>
<table border="0" width="100%" cellspacing="0" cellpadding="0">
<tr>
<td align="left" width="50"><div class="shubu">102</div></td>
<td>&nbsp;&nbsp;</td>
</tr>
</table>

<span style="margin-left:25px"></span><span class='green'>//调用API方法，获得文中的实体</span>
</p>
</div>

<div>
<p>
<table border="0" width="100%" cellspacing="0" cellpadding="0">
<tr>
<td align="left" width="50"><div class="shubu">103</div></td>
<td>&nbsp;&nbsp;</td>
</tr>
</table>

<span style="margin-left:25px"></span><span class='green'>String protein[] = t.getEntities(fileContent， "PROTEIN");</span>
</p>
</div>

<div>
<p>
<table border="0" width="100%" cellspacing="0" cellpadding="0">
<tr>
<td align="left" width="50"><div class="shubu">104</div></td>
<td>&nbsp;&nbsp;</td>
</tr>
</table>

<span style="margin-left:25px"></span><span class='green'>图4-7</span>
</p>
</div>

<div>
<p>
<table border="0" width="100%" cellspacing="0" cellpadding="0">
<tr>
<td align="left" width="50"><div class="shubu">105</div></td>
<td>&nbsp;&nbsp;</td>
</tr>
</table>

<span style="margin-left:25px"></span><span class='green'>由于系统还要挖掘出与蛋白质磷酸化修饰有关的激酶和修饰位点，所以我们必须还要继续识别文本中的激酶和修饰位点的实体名词，</span><a href='../sentence_detail/293.htm' target='right' class='orange' >但是 ABNER工具只提供了蛋白质， DNA， RNA，细胞系，细胞类型五个类型的实体，所以我们还要对这些实体进行训练，</a><span class='green'>培养一个能够识别激酶和修饰位点的语料库。</span><a href='../sentence_detail/295.htm' target='right' class='orange' >ABNER工具给我们提供了训练语料库的接口。</a><span class='green'>我们可以初始化一个 Trainer的实例，调用 Train里面的 train( trainFile， modelFile)方法， trainFile就是训练文本的路径， modelFile就是语料库模型文件的路径，</span><span class='green'>比如想识别一个磷酸化修饰的位点( Ser32)，我们可以在 trainFile的文件里面填写训练的规则，官方的 demo里面介绍了如何填写训练集文件，</span><span class='green'>图4-8是官网 demo的一个训练格式。</span><a href='../sentence_detail/299.htm' target='right' class='orange' >训练文件的规则概括成四点：</a><a href='../sentence_detail/300.htm' target='right' class='red' >一，每一句话要按照每个token（可以理解为每个单词）空格间开，并且一句话写在一行；</a><span class='green'>二，每一个token的左边的单词，右边是词性标注，两者用‘|’符号间隔开；</span><span class='green'>三，每一个实体的第一个单词的词性标注前要加前缀B-，剩下其他的单词前面要加前缀I-；</span><a href='../sentence_detail/303.htm' target='right' class='orange' >四，每个不是实体的单词的词性标注要设为O。</a><a href='../sentence_detail/304.htm' target='right' class='orange' >用着我们训练一段能够识别位点的训练集如图4-9所示。</a><span class='green'>生成一个model，然后用model作为语料库去识别出文档里面的为位点实体。</span><span class='green'>图4-10中的代码说明了如何训练一个语料库，并使用语料库进行识别文档的。</span>
</p>
</div>

<div>
<p>
<table border="0" width="100%" cellspacing="0" cellpadding="0">
<tr>
<td align="left" width="50"><div class="shubu">106</div></td>
<td>&nbsp;&nbsp;</td>
</tr>
</table>

<span style="margin-left:25px"></span><span class='green'>(pre)</span>
</p>
</div>

<div>
<p>
<table border="0" width="100%" cellspacing="0" cellpadding="0">
<tr>
<td align="left" width="50"><div class="shubu">107</div></td>
<td>&nbsp;&nbsp;</td>
</tr>
</table>

<span style="margin-left:25px"></span><span class='green'>IL-2|B-DNA gene|I-DNA expression|O and|O NF-kappa|B-PROTEIN B|I-PROTEIN activation|O ...</span>
</p>
</div>

<div>
<p>
<table border="0" width="100%" cellspacing="0" cellpadding="0">
<tr>
<td align="left" width="50"><div class="shubu">108</div></td>
<td>&nbsp;&nbsp;</td>
</tr>
</table>

<span style="margin-left:25px"></span><span class='green'>(/pre)</span>
</p>
</div>

<div>
<p>
<table border="0" width="100%" cellspacing="0" cellpadding="0">
<tr>
<td align="left" width="50"><div class="shubu">109</div></td>
<td>&nbsp;&nbsp;</td>
</tr>
</table>

<span style="margin-left:25px"></span><span class='green'>图4-8</span>
</p>
</div>

<div>
<p>
<table border="0" width="100%" cellspacing="0" cellpadding="0">
<tr>
<td align="left" width="50"><div class="shubu">110</div></td>
<td>&nbsp;&nbsp;</td>
</tr>
</table>

<span style="margin-left:25px"></span><span class='green'>GRK6| O phosphorylates| O Iκ Bα| O at| O Ser32| B- POSITION or| O Ser36|</span><span class='green'>B- POSITION and| O enhances| O TNF-α- induced| O inflammation| O.| O</span>
</p>
</div>

<div>
<p>
<table border="0" width="100%" cellspacing="0" cellpadding="0">
<tr>
<td align="left" width="50"><div class="shubu">111</div></td>
<td>&nbsp;&nbsp;</td>
</tr>
</table>

<span style="margin-left:25px"></span><span class='green'>图4-9</span>
</p>
</div>

<div>
<p>
<table border="0" width="100%" cellspacing="0" cellpadding="0">
<tr>
<td align="left" width="50"><div class="shubu">112</div></td>
<td>&nbsp;&nbsp;</td>
</tr>
</table>

<span style="margin-left:25px"></span><a href='../sentence_detail/314.htm' target='right' class='orange' >//第一步 训练得到语料库</a>
</p>
</div>

<div>
<p>
<table border="0" width="100%" cellspacing="0" cellpadding="0">
<tr>
<td align="left" width="50"><div class="shubu">113</div></td>
<td>&nbsp;&nbsp;</td>
</tr>
</table>

<span style="margin-left:25px"></span><span class='green'>Trainer t = new Trainer();</span>
</p>
</div>

<div>
<p>
<table border="0" width="100%" cellspacing="0" cellpadding="0">
<tr>
<td align="left" width="50"><div class="shubu">114</div></td>
<td>&nbsp;&nbsp;</td>
</tr>
</table>

<span style="margin-left:25px"></span><span class='green'>t.</span><span class='green'>train(trainTextPath， modelTextPath);</span>
</p>
</div>

<div>
<p>
<table border="0" width="100%" cellspacing="0" cellpadding="0">
<tr>
<td align="left" width="50"><div class="shubu">115</div></td>
<td>&nbsp;&nbsp;</td>
</tr>
</table>

<span style="margin-left:25px"></span><span class='green'>//第二步，用训练出来的语料库去识别文本</span>
</p>
</div>

<div>
<p>
<table border="0" width="100%" cellspacing="0" cellpadding="0">
<tr>
<td align="left" width="50"><div class="shubu">116</div></td>
<td>&nbsp;&nbsp;</td>
</tr>
</table>

<span style="margin-left:25px"></span><span class='green'>Tagger t = new Tagger(new File(Config.MODEL_PATH));</span>
</p>
</div>

<div>
<p>
<table border="0" width="100%" cellspacing="0" cellpadding="0">
<tr>
<td align="left" width="50"><div class="shubu">117</div></td>
<td>&nbsp;&nbsp;</td>
</tr>
</table>

<span style="margin-left:25px"></span><span class='green'>String res[] = t.getEntities(</span><span class='green'>"GRK6 phosphorylates at Ser32 and enhances TNF-α-induced inflammation."</span><span class='green'>， "POSITION");</span>
</p>
</div>

<div>
<p>
<table border="0" width="100%" cellspacing="0" cellpadding="0">
<tr>
<td align="left" width="50"><div class="shubu">118</div></td>
<td>&nbsp;&nbsp;</td>
</tr>
</table>

<span style="margin-left:25px"></span><span class='green'>图4-10</span>
</p>
</div>

<div>
<p>
<table border="0" width="100%" cellspacing="0" cellpadding="0">
<tr>
<td align="left" width="50"><div class="shubu">119</div></td>
<td>&nbsp;&nbsp;</td>
</tr>
</table>

<span style="margin-left:25px"></span><span class='green'>经过以上的步骤，我们可以通过abner里面自带的语料库去识别文本中的命名实体，也可以自己训练想要识别的实体的语料库来识别。</span>
</p>
</div>

<div>
<p>
<table border="0" width="100%" cellspacing="0" cellpadding="0">
<tr>
<td align="left" width="50"><div class="shubu">120</div></td>
<td>&nbsp;&nbsp;</td>
</tr>
</table>

<span style="margin-left:25px"></span><span class='green'>4.5 实体关系提取</span>
</p>
</div>

<div>
<p>
<table border="0" width="100%" cellspacing="0" cellpadding="0">
<tr>
<td align="left" width="50"><div class="shubu">121</div></td>
<td>&nbsp;&nbsp;</td>
</tr>
</table>

<span style="margin-left:25px"></span><span class='green'>4.5.1 关系提取概念</span>
</p>
</div>

<div>
<p>
<table border="0" width="100%" cellspacing="0" cellpadding="0">
<tr>
<td align="left" width="50"><div class="shubu">122</div></td>
<td>&nbsp;&nbsp;</td>
</tr>
</table>

<span style="margin-left:25px"></span><a href='../sentence_detail/327.htm' target='right' class='orange' >经过命名实体识别之后，现在就要提取实体之间的关系，这一步称之为实体关系提取。</a><a href='../sentence_detail/328.htm' target='right' class='orange' >实体关系的提取性能的关键因素在于实体识别的准确率，实体识别越准确，关系提取的性能就越高。</a><a href='../sentence_detail/329.htm' target='right' class='orange' >目前主要有五种实体关系提取的方法，第一种是基于模式识别的提取方法，基于模式识别的方法是普遍使用的提取方法，</a><span class='green'>这种方法主要使用了语言学的知识，在提取实体关系之前，先预先定义出一些基于句法、语义、等一些结构的模式，</span><span class='green'>然后在提取的过程中，把待处理的文本片段与这些模式进行匹配，然后通过一定的计算得出是否匹配，</span><span class='green'>如果匹配则这文本片段具有该模式所包含的关系特征，从而可以判断出改文本中的实体之间具有某种那个关系；</span><a href='../sentence_detail/333.htm' target='right' class='orange' >第二种是基于词典驱动的提取方法，基于词典的方法相比模式匹配的方法具有较高的复用性，</a><span class='green'>用户想匹配新的实体关系的时候不用具备所有的语法，语义模式，而只需往词典里面添加新的关系词语，</span><a href='../sentence_detail/335.htm' target='right' class='orange' >系统即可根据词典来提取相应的关系；</a><span class='green'>第三种是基于机器学习的提取方法，这种方法的核心思想就是把实体关系提取看做是一种分类，进而关系提取就相当于是一次类别的判断。</span><span class='green'>运用此方法之前我们需要手动地对分类器培养一批语料库，然后分类器应用这些语料库对文本进行分类，从而得出相应的关系；</span><span class='green'>第四种基于Ontology的 提取方法，最后一种是混合式的提取方法。</span>
</p>
</div>

<div>
<p>
<table border="0" width="100%" cellspacing="0" cellpadding="0">
<tr>
<td align="left" width="50"><div class="shubu">123</div></td>
<td>&nbsp;&nbsp;</td>
</tr>
</table>

<span style="margin-left:25px"></span><span class='green'>4.5.2 Rlims-p工具介绍及其工作原理</span>
</p>
</div>

<div>
<p>
<table border="0" width="100%" cellspacing="0" cellpadding="0">
<tr>
<td align="left" width="50"><div class="shubu">124</div></td>
<td>&nbsp;&nbsp;</td>
</tr>
</table>

<span style="margin-left:25px"></span><span class='green'>Rlims- p是一款典型的基于规则的文本挖掘工具，它是针对于挖掘提取蛋白质磷酸化修饰的信息，</span><span class='green'>包括蛋白质底物信息，修饰激酶信息，修饰位点信息，还包括了前三者之间的关系信息等等。</span><span class='green'>本篇论文中的核心文本处理的机制就是围绕着Rlims-p程序展开的。</span><span class='green'>采取此工具的原因主要概况为两点，一是从功能上来说，这款工具恰好完全能够帮助我提取文献里的实体，</span><span class='green'>并且找出其中的关系，这也是本次论文设计的主要目的，二是这款工具给我们开发者提供了 Rlims- p文本处理的接口，</span><span class='green'>只要把文献的内容通过传参的形式发送至对方的服务器，对方就会及时处理并且把结果返回，</span><span class='green'>这样就可以在 rlims- p的帮助下进行二次开发。</span>
</p>
</div>

<div>
<p>
<table border="0" width="100%" cellspacing="0" cellpadding="0">
<tr>
<td align="left" width="50"><div class="shubu">125</div></td>
<td>&nbsp;&nbsp;</td>
</tr>
</table>

<span style="margin-left:25px"></span><span class='green'>Rlims-p工具里面主要包含两个主要的模块构成，第一个模块是自然语言处理模块（NLP Pipeline），第二个模块是信息提取模块。</span><a href='../sentence_detail/348.htm' target='right' class='orange' >每个模块里面有分很多个处理步骤。</a><span class='green'>图4-11展示了Rlims-p的模块结构图。</span>
</p>
</div>

<div>
<p>
<table border="0" width="100%" cellspacing="0" cellpadding="0">
<tr>
<td align="left" width="50"><div class="shubu">126</div></td>
<td>&nbsp;&nbsp;</td>
</tr>
</table>

<span style="margin-left:25px"></span><span class='green'>图4-11</span>
</p>
</div>

<div>
<p>
<table border="0" width="100%" cellspacing="0" cellpadding="0">
<tr>
<td align="left" width="50"><div class="shubu">127</div></td>
<td>&nbsp;&nbsp;</td>
</tr>
</table>

<span style="margin-left:25px"></span><span class='green'>第一个自然语言处理模块其实就类似于一个命名实体识别的一个过程，输入一个文档集进去，输出的结果就是文本里每个短语的词性，</span><span class='green'>当然这个短语并不一定就是命名实体，词性就是描述这个短语在上下文中的类型，比如说是动词，名词，</span><a href='../sentence_detail/353.htm' target='right' class='orange' >基因，蛋白质，蛋白质附属物，化学物质等等。</a><span class='green'>自然语言处理模块内部又分为了若干的小步骤包括了格式化数据，句子拆分， token化，单词标注，</span><span class='green'>分词，短语类型标注等等，这些标注对第二个模块里面的模式匹配有着重要的作用，稍后再提到。</span><span class='green'>第二个信息提取模块就是把第一个模块里的输出作为输入，然后提取出文中短语之间的关系，</span><span class='green'>判断出短语具体是蛋白质还是激酶还是位点等等，最后输入的就是检索的标注了，这个标注里面包含了，</span><a href='../sentence_detail/358.htm' target='right' class='orange' >各个蛋白质，激酶，位点的名称，以及实体之间的关系。</a><a href='../sentence_detail/359.htm' target='right' class='orange' >这个模块所使用到提取关系的方式就是基于规则的关系提取方法。</a><span class='green'>首先它预先定义了触发器-参数模式，扩展模式，链接关系模式三大模式，然后根据这三大模式再在文本中进行模式匹配，根据匹配的结果再进行判断。</span>
</p>
</div>


<div>
<span style="margin-left:25px"></span>
[
<a class="pagelink" href="paper_1.htm">首页</a>
<a class="pagelink" href="paper_3.htm">上一页</a>
<a class="pagelink" href="paper_5.htm">下一页</a>
<a class="pagelink" href="paper_6.htm">尾页</a>
页码：4/6页
]
</div>

<br><br><br>
<div style="margin-left:25px">

<img src="../../images/guanwang.gif">
</div>
</div>


<div class="zhengwencenter">
<p>
检测报告由<a href="http://www.paperpass.com/" target="_blank">PaperPass</a>文献相似度检测系统生成
</p>
<p>
Copyright © 2007-2015 PaperPass
</p>
</div>
<div style="margin-bottom:400px"></div>
</body>
</html>
